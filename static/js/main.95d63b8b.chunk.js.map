{"version":3,"sources":["components/Main/PhonebookSection/_shared/Box/Box.sc.ts","components/Main/PhonebookSection/_shared/Box/Box.tsx","components/Main/PhonebookSection/_shared/Input/Input.sc.ts","components/Main/PhonebookSection/_shared/Input/Input.tsx","components/Main/PhonebookSection/_shared/Button/Button.sc.ts","components/Main/PhonebookSection/_shared/Button/Button.tsx","components/Main/PhonebookSection/Phonebook/store/phonebookReducer.ts","components/Main/PhonebookSection/Phonebook/store/PhonebookContext.ts","components/Main/PhonebookSection/Phonebook/CreateContact/CreateContact.tsx","components/Main/PhonebookSection/Phonebook/ContactsFilter/ContactsFilter.tsx","components/Main/PhonebookSection/Phonebook/ContactsList/ContactsListItem/ContactsListItem.sc.ts","components/Main/PhonebookSection/Phonebook/ContactsList/ContactsListItem/ContactsListItem.tsx","components/Main/PhonebookSection/Phonebook/ContactsList/ContactsList.sc.ts","components/Main/PhonebookSection/Phonebook/ContactsList/ContactsListPlaceholder/ContactsListPlaceholder.sc.ts","components/Main/PhonebookSection/Phonebook/ContactsList/ContactsListPlaceholder/ContactsListPlaceholder.tsx","components/Main/PhonebookSection/Phonebook/ContactsList/ContactsList.tsx","components/Main/PhonebookSection/Phonebook/Phonebook.sc.ts","components/Main/PhonebookSection/Phonebook/store/PhonebookStorage.ts","components/Main/PhonebookSection/Phonebook/Phonebook.tsx","components/Main/Main.sc.tsx","components/Main/PhonebookSection/PhonebookSection.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["SBox","styled","div","Box","tag","children","props","as","SLabel","label","SText","span","SInput","input","Input","value","disabled","onChange","name","type","labelProps","inputProps","SButton","button","Button","phonebookInitialState","search","contacts","PhonebookActions","phonebookReducer","state","action","SET_CONTACTS","payload","CREATE_CONTACT","id","uuid","number","DELETE_CONTACT","filter","SET_SEARCH","PhonebookContext","React","createContext","dispatch","CreateContact","useContext","setName","useState","setNumber","handleNameChange","useCallback","e","target","trim","handleNumberChange","handleSubmit","preventDefault","prettifiedName","replace","trimmedNumber","some","contactName","toLowerCase","alert","autoComplete","onSubmit","ContactsFilter","setValue","debouncedHandler","debounce","handleChange","persist","useEffect","length","SContactsListItem","SName","SNumber","SDelete","ContactsListItem","onContactDelete","data-id","onClick","currentTarget","getAttribute","SContactsList","SContactsListPlaceholder","ContactsListPlaceholder","message","ContactsList","handleContactDelete","filteredContacts","useMemo","toLocaleLowerCase","includes","map","key","SPhonebook","article","SHeading","h3","PhonebookStorage","constructor","getContacts","data","localStorage","getItem","this","JSON","parse","console","error","saveContacts","serializedContacts","stringify","setItem","Phonebook","useReducer","phonebookStorage","useRef","current","phonebookContext","Provider","SMainHeading","h1","SMainSection","section","SMain","main","SMainSectionHeading","h2","SMainSectionContent","bg","PhonebookSection","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.95d63b8b.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const SBox = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin: 0;\n    padding: 10px;\n    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.75);\n    border-radius: 2px;\n    background: white;\n\n    > * {\n        margin-top: 10px;\n\n        &:first-child {\n            margin-top: 0;\n        }\n    }\n`;\n","import React from 'react';\nimport { SBox } from './Box.sc';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type BoxProps = any;\n\nexport const Box: React.FC<BoxProps> = ({ tag = 'div', children, ...props }) => {\n    return (\n        <SBox as={tag} {...props}>\n            {children}\n        </SBox>\n    );\n};\n","import styled from 'styled-components';\n\nexport const SLabel = styled.label`\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const SText = styled.span``;\n\nexport const SInput = styled.input`\n    margin-top: 5px;\n    padding: 5px;\n\n    &:first-child {\n        margin-top: 0;\n    }\n`;\n","import React, { ChangeEventHandler, HTMLAttributes, InputHTMLAttributes } from 'react';\nimport { SInput, SLabel, SText } from './Input.sc';\n\nexport type InputProps = {\n    label?: string;\n    value?: string;\n    onChange?: ChangeEventHandler<HTMLInputElement>;\n    disabled?: boolean;\n    name?: string;\n    type?: string;\n    labelProps?: HTMLAttributes<HTMLLabelElement>;\n    inputProps?: InputHTMLAttributes<HTMLInputElement>;\n};\n\nexport const Input: React.FC<InputProps> = ({\n    label,\n    value,\n    disabled,\n    onChange,\n    name,\n    type,\n    labelProps,\n    inputProps,\n}) => {\n    return (\n        <SLabel {...labelProps}>\n            {label && <SText>{label}</SText>}\n            <SInput value={value} onChange={onChange} disabled={disabled} name={name} type={type} {...inputProps} />\n        </SLabel>\n    );\n};\n","import styled from 'styled-components';\n\nexport const SButton = styled.button`\n    padding: 5px;\n`;\n","import React, { ButtonHTMLAttributes } from 'react';\nimport { SButton } from './Button.sc';\n\nexport type ButtonProps = ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport const Button: React.FC<ButtonProps> = ({ children, ...props }) => {\n    return <SButton {...props}>{children}</SButton>;\n};\n","import { v4 as uuid } from 'uuid';\nimport { Contact } from '../_shared/Contact';\n\nexport type PhonebookState = { search: string; contacts: Contact[] };\n\nexport const phonebookInitialState: PhonebookState = {\n    search: '',\n    contacts: [],\n};\n\nexport enum PhonebookActions {\n    SET_CONTACTS = 'SET_CONTACTS',\n    CREATE_CONTACT = 'CREATE_CONTACT',\n    DELETE_CONTACT = 'DELETE_CONTACT',\n    SET_SEARCH = 'SET_SEARCH',\n}\n\nexport type SetContactsAction = {\n    type: PhonebookActions.SET_CONTACTS;\n    payload: {\n        contacts: Contact[];\n    };\n};\n\nexport type CreateContactAction = {\n    type: PhonebookActions.CREATE_CONTACT;\n    payload: Omit<Contact, 'id'>;\n};\n\nexport type DeleteContactAction = {\n    type: PhonebookActions.DELETE_CONTACT;\n    payload: {\n        id: string;\n    };\n};\n\nexport type SetSearchAction = {\n    type: PhonebookActions.SET_SEARCH;\n    payload: {\n        search: string;\n    };\n};\n\nexport type PhonebookActionTypes = SetContactsAction | CreateContactAction | DeleteContactAction | SetSearchAction;\n\nexport const phonebookReducer = (state: PhonebookState, action: PhonebookActionTypes): PhonebookState => {\n    switch (action.type) {\n        case PhonebookActions.SET_CONTACTS:\n            return {\n                ...state,\n                contacts: action.payload.contacts,\n            };\n        case PhonebookActions.CREATE_CONTACT:\n            return {\n                ...state,\n                contacts: [...state.contacts, { id: uuid(), name: action.payload.name, number: action.payload.number }],\n            };\n        case PhonebookActions.DELETE_CONTACT:\n            return {\n                ...state,\n                contacts: [...state.contacts.filter(({ id }) => id !== action.payload.id)],\n            };\n        case PhonebookActions.SET_SEARCH:\n            return {\n                ...state,\n                search: action.payload.search,\n            };\n        default:\n            return state;\n    }\n};\n","import React from 'react';\nimport { PhonebookActionTypes, phonebookInitialState, PhonebookState } from './phonebookReducer';\n\nexport const PhonebookContext = React.createContext<\n    PhonebookState & { dispatch: React.Dispatch<PhonebookActionTypes> }\n>({ ...phonebookInitialState, dispatch: () => 0 });\n","import React, { ChangeEvent, useCallback, useContext, useState } from 'react';\nimport { Box } from '../../_shared/Box';\nimport { Input } from '../../_shared/Input';\nimport { Button } from '../../_shared/Button';\nimport { PhonebookContext } from '../store/PhonebookContext';\nimport { PhonebookActions } from '../store/phonebookReducer';\n\nexport const CreateContact: React.FC = () => {\n    const { contacts, dispatch } = useContext(PhonebookContext);\n\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const handleNameChange = useCallback((e: ChangeEvent<HTMLInputElement>): void => setName(e.target.value.trim()), [\n        setName,\n    ]);\n\n    const handleNumberChange = useCallback(\n        (e: ChangeEvent<HTMLInputElement>): void => setNumber(e.target.value.trim()),\n        [setNumber],\n    );\n\n    const handleSubmit = useCallback(\n        (e) => {\n            e.preventDefault();\n\n            const prettifiedName: string = e.target.name.value.trim().replace(/\\s{2,}/g, ' ');\n            const trimmedNumber: string = e.target.number.value.trim();\n\n            if (!prettifiedName || !trimmedNumber) return;\n\n            const hasDuplicate = contacts.some(({ name: contactName }) => {\n                return prettifiedName.toLowerCase() === contactName.toLowerCase();\n            });\n\n            if (hasDuplicate) {\n                // eslint-disable-next-line no-alert\n                alert(`${prettifiedName} is already in your contacts`);\n\n                return;\n            }\n\n            dispatch({\n                type: PhonebookActions.CREATE_CONTACT,\n                payload: { name: prettifiedName, number: trimmedNumber },\n            });\n\n            setName('');\n            setNumber('');\n        },\n        [contacts, dispatch],\n    );\n\n    return (\n        <Box tag=\"form\" autoComplete=\"off\" onSubmit={handleSubmit}>\n            <Input label=\"Name\" name=\"name\" value={name} onChange={handleNameChange} />\n            <Input label=\"Number\" name=\"number\" value={number} onChange={handleNumberChange} />\n            <Button disabled={!name || !number}>Add contact</Button>\n        </Box>\n    );\n};\n","import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { debounce } from 'lodash';\nimport { Box } from '../../_shared/Box';\nimport { Input } from '../../_shared/Input';\nimport { PhonebookContext } from '../store/PhonebookContext';\nimport { PhonebookActions } from '../store/phonebookReducer';\n\nexport const ContactsFilter: React.FC = () => {\n    const { contacts, dispatch } = useContext(PhonebookContext);\n    const [value, setValue] = useState('');\n\n    const debouncedHandler = useCallback(\n        debounce(\n            (e) => dispatch({ type: PhonebookActions.SET_SEARCH, payload: { search: e.target.value.trim() } }),\n            200,\n        ),\n        [debounce],\n    );\n\n    const handleChange = useCallback(\n        (e) => {\n            e.persist();\n\n            setValue(e.target.value.trim());\n\n            debouncedHandler(e);\n        },\n        [debouncedHandler],\n    );\n\n    useEffect(() => {\n        if (!contacts.length && value) setValue('');\n    }, [contacts, value, setValue]);\n\n    return (\n        <Box>\n            <Input label=\"Find contacts by name\" value={value} onChange={handleChange} disabled={!contacts.length} />\n        </Box>\n    );\n};\n","import styled from 'styled-components';\nimport { SBox } from '../../../_shared/Box/Box.sc';\nimport { SButton } from '../../../_shared/Button/Button.sc';\n\nexport const SContactsListItem = styled(SBox)`\n    flex-direction: row;\n    align-items: center;\n\n    > * {\n        margin: 0;\n    }\n`;\n\nexport const SName = styled.span``;\n\nexport const SNumber = styled.span`\n    margin-left: auto;\n`;\n\nexport const SDelete = styled(SButton)`\n    margin-left: auto;\n`;\n","import React from 'react';\nimport { SContactsListItem, SDelete, SName, SNumber } from './ContactsListItem.sc';\nimport { Contact } from '../../_shared/Contact';\n\nexport type ContactsListItemProps = Contact & {\n    onContactDelete: (id: string) => void;\n};\n\nexport const ContactsListItem: React.FC<ContactsListItemProps> = ({ id, name, number, onContactDelete }) => {\n    const handleContactDelete = (e): void => {\n        onContactDelete(e.currentTarget.getAttribute('data-id'));\n    };\n\n    return (\n        <SContactsListItem as=\"li\">\n            <SName>{name}</SName>\n            <SNumber>{number}</SNumber>\n            <SDelete data-id={id} onClick={handleContactDelete}>\n                Delete\n            </SDelete>\n        </SContactsListItem>\n    );\n};\n","import styled from 'styled-components';\nimport { SBox } from '../../_shared/Box/Box.sc';\n\nexport const SContactsList = styled(SBox)`\n    margin: 0;\n    padding: 0;\n    box-shadow: none;\n    border-radius: 0;\n    background: 0;\n`;\n","import styled from 'styled-components';\nimport { SContactsListItem } from '../ContactsListItem/ContactsListItem.sc';\n\nexport const SContactsListPlaceholder = styled(SContactsListItem)`\n    justify-content: center;\n`;\n","import React from 'react';\nimport { SContactsListPlaceholder } from './ContactsListPlaceholder.sc';\n\nexport type ContactsListPlaceholderProps = {\n    message: string;\n};\n\nexport const ContactsListPlaceholder: React.FC<ContactsListPlaceholderProps> = ({ message }) => {\n    return <SContactsListPlaceholder as=\"li\">{message}</SContactsListPlaceholder>;\n};\n","import React, { useCallback, useContext, useMemo } from 'react';\nimport { ContactsListItem } from './ContactsListItem';\nimport { SContactsList } from './ContactsList.sc';\nimport { ContactsListPlaceholder } from './ContactsListPlaceholder';\nimport { PhonebookContext } from '../store/PhonebookContext';\nimport { PhonebookActions } from '../store/phonebookReducer';\n\nexport const ContactsList: React.FC = () => {\n    const { search, contacts, dispatch } = useContext(PhonebookContext);\n\n    const handleContactDelete = useCallback(\n        (id) => dispatch({ type: PhonebookActions.DELETE_CONTACT, payload: { id } }),\n        [dispatch],\n    );\n\n    const filteredContacts = useMemo(\n        () => contacts.filter(({ name }) => name.toLocaleLowerCase().includes(search.toLocaleLowerCase())),\n        [search, contacts],\n    );\n\n    return (\n        <SContactsList as=\"ul\">\n            {filteredContacts.length ? (\n                filteredContacts.map(({ id, name, number }) => (\n                    <ContactsListItem\n                        key={id}\n                        id={id}\n                        name={name}\n                        number={number}\n                        onContactDelete={handleContactDelete}\n                    />\n                ))\n            ) : (\n                <ContactsListPlaceholder message=\"Nothing to show\" />\n            )}\n        </SContactsList>\n    );\n};\n","import styled from 'styled-components';\nimport { SBox } from '../_shared/Box/Box.sc';\n\nexport const SPhonebook = styled.article`\n    --color-big-stone: #122236;\n    --color-big-stone-pale: rgba(18, 34, 54, 0.1);\n    --color-regent-gray: #82909e;\n    --color-mystic: #e4e9f0;\n\n    width: 320px;\n\n    > ${SBox} {\n        margin-top: 20px;\n\n        &:first-child {\n            margin-top: 0;\n        }\n\n        &:empty {\n            margin-top: 0;\n        }\n    }\n`;\n\nexport const SHeading = styled.h3`\n    margin: 0 0 20px;\n`;\n","import { Contact } from '../_shared/Contact';\n\nexport class PhonebookStorage {\n    constructor(public key) {}\n\n    getContacts(): Contact[] {\n        const data = localStorage.getItem(this.key);\n\n        try {\n            const { contacts } = data ? JSON.parse(data) : { contacts: [] };\n\n            return contacts;\n        } catch (e) {\n            console.error(`Failed to parse contacts storage: ${data}.`);\n\n            throw e;\n        }\n    }\n\n    saveContacts(contacts): void {\n        try {\n            const serializedContacts = JSON.stringify({ contacts });\n\n            localStorage.setItem(this.key, serializedContacts);\n        } catch (e) {\n            console.error(`Failed to serialize contacts list.`);\n\n            throw e;\n        }\n    }\n}\n","import React, { useEffect, useMemo, useReducer, useRef } from 'react';\nimport { CreateContact } from './CreateContact';\nimport { ContactsFilter } from './ContactsFilter';\nimport { ContactsList } from './ContactsList';\nimport { SHeading, SPhonebook } from './Phonebook.sc';\nimport { phonebookReducer, phonebookInitialState, PhonebookActions } from './store/phonebookReducer';\nimport { PhonebookContext } from './store/PhonebookContext';\nimport { PhonebookStorage } from './store/PhonebookStorage';\n\nexport const Phonebook: React.FC = () => {\n    const [{ search, contacts }, dispatch] = useReducer(phonebookReducer, phonebookInitialState);\n    const phonebookStorage = useRef(new PhonebookStorage('phonebook-v1'));\n\n    useEffect(() => {\n        dispatch({\n            type: PhonebookActions.SET_CONTACTS,\n            payload: { contacts: phonebookStorage.current.getContacts() },\n        });\n    }, []);\n\n    useEffect(() => {\n        phonebookStorage.current.saveContacts(contacts);\n    }, [contacts]);\n\n    const phonebookContext = useMemo(() => ({ search, contacts, dispatch }), [search, contacts, dispatch]);\n\n    return (\n        <PhonebookContext.Provider value={phonebookContext}>\n            <SPhonebook>\n                <SHeading>Phonebook</SHeading>\n                <CreateContact />\n                <ContactsFilter />\n                <ContactsList />\n            </SPhonebook>\n        </PhonebookContext.Provider>\n    );\n};\n","import styled from 'styled-components';\n\nexport const SMainHeading = styled.h1`\n    margin: 0;\n    font-size: 24px;\n`;\n\nexport const SMainSection = styled.section``;\n\nexport const SMain = styled.main`\n    min-width: 400px;\n    max-width: 768px;\n    margin: 0 auto;\n    padding: 60px 20px 60px;\n\n    > ${SMainSection} {\n        margin-top: 50px;\n\n        & + & {\n            margin-top: 40px;\n        }\n\n        &:first-child {\n            margin-top: 0;\n        }\n    }\n`;\n\nexport const SMainSectionHeading = styled.h2`\n    margin: 0;\n    font-size: 20px;\n`;\n\nexport const SMainSectionContent = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-top: 20px;\n    padding: 20px;\n    box-shadow: 0 0 3px 0 rgba(0, 0, 0, 0.2);\n    border-radius: 2px;\n    background: ${({ bg }): string => bg || '#ffffff'};\n`;\n","import React from 'react';\nimport { Phonebook } from './Phonebook';\nimport { SMainSection, SMainSectionContent, SMainSectionHeading } from '../Main.sc';\n\nexport const PhonebookSection: React.FC = () => {\n    return (\n        <SMainSection>\n            <SMainSectionHeading>Telephone book</SMainSectionHeading>\n\n            <SMainSectionContent bg=\"skyblue\">\n                <Phonebook />\n            </SMainSectionContent>\n        </SMainSection>\n    );\n};\n","import React from 'react';\nimport { PhonebookSection } from '../Main/PhonebookSection';\nimport { SMain, SMainHeading } from '../Main';\n\nexport const App: React.FC = () => {\n    return (\n        <SMain>\n            <SMainHeading>Homework 02 – Ex. 02</SMainHeading>\n            <PhonebookSection />\n        </SMain>\n    );\n};\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}