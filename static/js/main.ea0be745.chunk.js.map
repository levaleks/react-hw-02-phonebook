{"version":3,"sources":["components/Main/PhonebookSection/_shared/Box/Box.sc.ts","components/Main/PhonebookSection/_shared/Box/Box.tsx","components/Main/PhonebookSection/_shared/Input/Input.sc.ts","components/Main/PhonebookSection/_shared/Input/Input.tsx","components/Main/PhonebookSection/_shared/Button/Button.sc.ts","components/Main/PhonebookSection/_shared/Button/Button.tsx","components/Main/PhonebookSection/Phonebook/CreateContact/CreateContact.tsx","components/Main/PhonebookSection/Phonebook/ContactsFilter/ContactsFilter.tsx","components/Main/PhonebookSection/Phonebook/ContactsList/ContactsListItem/ContactsListItem.sc.ts","components/Main/PhonebookSection/Phonebook/ContactsList/ContactsListItem/ContactsListItem.tsx","components/Main/PhonebookSection/Phonebook/ContactsList/ContactsList.sc.ts","components/Main/PhonebookSection/Phonebook/ContactsList/ContactsListPlaceholder/ContactsListPlaceholder.sc.ts","components/Main/PhonebookSection/Phonebook/ContactsList/ContactsListPlaceholder/ContactsListPlaceholder.tsx","components/Main/PhonebookSection/Phonebook/ContactsList/ContactsList.tsx","components/Main/PhonebookSection/Phonebook/Phonebook.sc.ts","components/Main/PhonebookSection/Phonebook/phonebookReducer.ts","components/Main/PhonebookSection/Phonebook/Phonebook.tsx","components/Main/Main.sc.tsx","components/Main/PhonebookSection/PhonebookSection.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["SBox","styled","div","Box","tag","children","props","as","SLabel","label","SText","span","SInput","input","Input","value","disabled","onChange","name","type","labelProps","inputProps","SButton","button","Button","CreateContact","onContactCreate","setName","useState","number","setNumber","handleNameChange","useCallback","e","target","trim","handleNumberChange","handleSubmit","preventDefault","clearForm","autoComplete","onSubmit","ContactsFilter","setValue","debouncedHandler","debounce","handleChange","persist","useEffect","SContactsListItem","SName","SNumber","SDelete","ContactsListItem","id","onContactDelete","data-id","onClick","currentTarget","getAttribute","SContactsList","SContactsListPlaceholder","ContactsListPlaceholder","message","ContactsList","contacts","length","map","key","SPhonebook","article","SHeading","h3","phonebookInitialState","search","phonebookReducer","state","action","uniqueId","payload","filter","Phonebook","dispatch","useReducer","handleContactCreate","prettifiedName","replace","some","contactName","toLowerCase","alert","handleContactDelete","handleFilter","query","filteredContacts","useMemo","toLocaleLowerCase","includes","SMainHeading","h1","SMainSection","section","SMain","main","SMainSectionHeading","h2","SMainSectionContent","bg","PhonebookSection","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.ea0be745.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const SBox = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin: 0;\n    padding: 10px;\n    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.75);\n    border-radius: 2px;\n    background: white;\n\n    > * {\n        margin-top: 10px;\n\n        &:first-child {\n            margin-top: 0;\n        }\n    }\n`;\n","import React from 'react';\nimport { SBox } from './Box.sc';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type BoxProps = any;\n\nexport const Box: React.FC<BoxProps> = ({ tag = 'div', children, ...props }) => {\n    return (\n        <SBox as={tag} {...props}>\n            {children}\n        </SBox>\n    );\n};\n","import styled from 'styled-components';\n\nexport const SLabel = styled.label`\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const SText = styled.span``;\n\nexport const SInput = styled.input`\n    margin-top: 5px;\n    padding: 5px;\n\n    &:first-child {\n        margin-top: 0;\n    }\n`;\n","import React, { ChangeEventHandler, HTMLAttributes, InputHTMLAttributes } from 'react';\nimport { SInput, SLabel, SText } from './Input.sc';\n\nexport type InputProps = {\n    label?: string;\n    value?: string;\n    onChange?: ChangeEventHandler<HTMLInputElement>;\n    disabled?: boolean;\n    name?: string;\n    type?: string;\n    labelProps?: HTMLAttributes<HTMLLabelElement>;\n    inputProps?: InputHTMLAttributes<HTMLInputElement>;\n};\n\nexport const Input: React.FC<InputProps> = ({\n    label,\n    value,\n    disabled,\n    onChange,\n    name,\n    type,\n    labelProps,\n    inputProps,\n}) => {\n    return (\n        <SLabel {...labelProps}>\n            {label && <SText>{label}</SText>}\n            <SInput value={value} onChange={onChange} disabled={disabled} name={name} type={type} {...inputProps} />\n        </SLabel>\n    );\n};\n","import styled from 'styled-components';\n\nexport const SButton = styled.button`\n    padding: 5px;\n`;\n","import React, { ButtonHTMLAttributes } from 'react';\nimport { SButton } from './Button.sc';\n\nexport type ButtonProps = ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport const Button: React.FC<ButtonProps> = ({ children, ...props }) => {\n    return <SButton {...props}>{children}</SButton>;\n};\n","import React, { ChangeEvent, useCallback, useState } from 'react';\nimport { Box } from '../../_shared/Box';\nimport { Input } from '../../_shared/Input';\nimport { Button } from '../../_shared/Button';\n\nexport type CreateContactProps = {\n    onContactCreate: (data: { name: string; number: string; clearForm: () => void }) => void;\n};\n\nexport const CreateContact: React.FC<CreateContactProps> = ({ onContactCreate }) => {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const handleNameChange = useCallback((e: ChangeEvent<HTMLInputElement>): void => setName(e.target.value.trim()), [\n        setName,\n    ]);\n\n    const handleNumberChange = useCallback(\n        (e: ChangeEvent<HTMLInputElement>): void => setNumber(e.target.value.trim()),\n        [setNumber],\n    );\n\n    const handleSubmit = useCallback(\n        (e) => {\n            e.preventDefault();\n\n            onContactCreate({\n                name: e.target.name.value.trim(),\n                number: e.target.number.value.trim(),\n                clearForm: () => {\n                    setName('');\n                    setNumber('');\n                },\n            });\n        },\n        [onContactCreate],\n    );\n\n    return (\n        <Box tag=\"form\" autoComplete=\"off\" onSubmit={handleSubmit}>\n            <Input label=\"Name\" name=\"name\" value={name} onChange={handleNameChange} />\n            <Input label=\"Number\" name=\"number\" value={number} onChange={handleNumberChange} />\n            <Button disabled={!name || !number}>Add contact</Button>\n        </Box>\n    );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { debounce } from 'lodash';\nimport { Box } from '../../_shared/Box';\nimport { Input } from '../../_shared/Input';\n\nexport type ContactsFilterProps = {\n    disabled?: boolean;\n    onChange: (query: string) => void;\n};\n\nexport const ContactsFilter: React.FC<ContactsFilterProps> = ({ disabled, onChange }) => {\n    const [value, setValue] = useState('');\n\n    const debouncedHandler = useCallback(\n        debounce((e) => onChange(e.target.value.trim()), 200),\n        [debounce, setValue, onChange],\n    );\n\n    const handleChange = useCallback(\n        (e) => {\n            e.persist();\n\n            setValue(e.target.value.trim());\n\n            debouncedHandler(e);\n        },\n        [debouncedHandler],\n    );\n\n    useEffect(() => {\n        if (disabled && value) setValue('');\n    }, [disabled, value, setValue]);\n\n    return (\n        <Box>\n            <Input label=\"Find contacts by name\" value={value} onChange={handleChange} disabled={disabled} />\n        </Box>\n    );\n};\n","import styled from 'styled-components';\nimport { SBox } from '../../../_shared/Box/Box.sc';\nimport { SButton } from '../../../_shared/Button/Button.sc';\n\nexport const SContactsListItem = styled(SBox)`\n    flex-direction: row;\n    align-items: center;\n\n    > * {\n        margin: 0;\n    }\n`;\n\nexport const SName = styled.span``;\n\nexport const SNumber = styled.span`\n    margin-left: auto;\n`;\n\nexport const SDelete = styled(SButton)`\n    margin-left: auto;\n`;\n","import React from 'react';\nimport { SContactsListItem, SDelete, SName, SNumber } from './ContactsListItem.sc';\nimport { Contact } from '../../phonebookReducer';\n\nexport type ContactsListItemProps = Contact & {\n    onContactDelete: (id: string) => void;\n};\n\nexport const ContactsListItem: React.FC<ContactsListItemProps> = ({ id, name, number, onContactDelete }) => {\n    const handleContactDelete = (e): void => {\n        onContactDelete(e.currentTarget.getAttribute('data-id'));\n    };\n\n    return (\n        <SContactsListItem as=\"li\">\n            <SName>{name}</SName>\n            <SNumber>{number}</SNumber>\n            <SDelete data-id={id} onClick={handleContactDelete}>\n                Delete\n            </SDelete>\n        </SContactsListItem>\n    );\n};\n","import styled from 'styled-components';\nimport { SBox } from '../../_shared/Box/Box.sc';\n\nexport const SContactsList = styled(SBox)`\n    margin: 0;\n    padding: 0;\n    box-shadow: none;\n    border-radius: 0;\n    background: 0;\n`;\n","import styled from 'styled-components';\nimport { SContactsListItem } from '../ContactsListItem/ContactsListItem.sc';\n\nexport const SContactsListPlaceholder = styled(SContactsListItem)`\n    justify-content: center;\n`;\n","import React from 'react';\nimport { SContactsListPlaceholder } from './ContactsListPlaceholder.sc';\n\nexport type ContactsListPlaceholderProps = {\n    message: string;\n};\n\nexport const ContactsListPlaceholder: React.FC<ContactsListPlaceholderProps> = ({ message }) => {\n    return <SContactsListPlaceholder as=\"li\">{message}</SContactsListPlaceholder>;\n};\n","import React from 'react';\nimport { ContactsListItem } from './ContactsListItem';\nimport { SContactsList } from './ContactsList.sc';\nimport { Contact } from '../phonebookReducer';\nimport { ContactsListPlaceholder } from './ContactsListPlaceholder';\n\nexport type ContactsListProps = {\n    onContactDelete: (id: string) => void;\n    contacts: Contact[];\n};\n\nexport const ContactsList: React.FC<ContactsListProps> = ({ contacts, onContactDelete }) => {\n    return (\n        <SContactsList as=\"ul\">\n            {contacts.length ? (\n                contacts.map(({ id, name, number }) => (\n                    <ContactsListItem key={id} id={id} name={name} number={number} onContactDelete={onContactDelete} />\n                ))\n            ) : (\n                <ContactsListPlaceholder message=\"Nothing to show\" />\n            )}\n        </SContactsList>\n    );\n};\n","import styled from 'styled-components';\nimport { SBox } from '../_shared/Box/Box.sc';\n\nexport const SPhonebook = styled.article`\n    --color-big-stone: #122236;\n    --color-big-stone-pale: rgba(18, 34, 54, 0.1);\n    --color-regent-gray: #82909e;\n    --color-mystic: #e4e9f0;\n\n    width: 320px;\n\n    > ${SBox} {\n        margin-top: 20px;\n\n        &:first-child {\n            margin-top: 0;\n        }\n\n        &:empty {\n            margin-top: 0;\n        }\n    }\n`;\n\nexport const SHeading = styled.h3`\n    margin: 0 0 20px;\n`;\n","import { uniqueId } from 'lodash';\n\nexport type Contact = { id: string; name: string; number: string };\n\nexport type PhonebookState = { search: string; contacts: Contact[] };\n\nexport const phonebookInitialState: PhonebookState = {\n    search: '',\n    contacts: [],\n};\n\nexport const phonebookReducer = (state, action): PhonebookState => {\n    switch (action.type) {\n        case 'CREATE_CONTACT':\n            return {\n                ...state,\n                contacts: [\n                    ...state.contacts,\n                    { id: uniqueId(), name: action.payload.name, number: action.payload.number },\n                ],\n            };\n        case 'DELETE_CONTACT':\n            return {\n                ...state,\n                contacts: [...state.contacts.filter(({ id }) => id !== action.payload.id)],\n            };\n        case 'SET_SEARCH':\n            return {\n                ...state,\n                search: action.payload.search,\n            };\n        default:\n            return state;\n    }\n};\n","import React, { useCallback, useMemo, useReducer } from 'react';\nimport { CreateContact } from './CreateContact';\nimport { ContactsFilter } from './ContactsFilter';\nimport { ContactsList } from './ContactsList';\nimport { SHeading, SPhonebook } from './Phonebook.sc';\nimport { phonebookReducer, phonebookInitialState } from './phonebookReducer';\n\nexport const Phonebook: React.FC = () => {\n    const [{ search, contacts }, dispatch] = useReducer(phonebookReducer, phonebookInitialState);\n\n    const handleContactCreate = useCallback(\n        ({ name, number, clearForm }) => {\n            if (!name || !number) return;\n\n            const prettifiedName = name.trim().replace(/\\s{2,}/g, ' ');\n\n            const hasDuplicate = contacts.some(({ name: contactName }) => {\n                return prettifiedName.toLowerCase() === contactName.toLowerCase();\n            });\n\n            if (hasDuplicate) {\n                alert(`${prettifiedName} is already in your contacts`);\n\n                return;\n            }\n\n            dispatch({ type: 'CREATE_CONTACT', payload: { name: prettifiedName, number } });\n\n            clearForm();\n        },\n        [contacts, dispatch],\n    );\n\n    const handleContactDelete = useCallback((id) => dispatch({ type: 'DELETE_CONTACT', payload: { id } }), [dispatch]);\n\n    const handleFilter = useCallback(\n        (query): void => {\n            dispatch({ type: 'SET_SEARCH', payload: { search: query } });\n        },\n        [dispatch],\n    );\n\n    const filteredContacts = useMemo(\n        () => contacts.filter(({ name }) => name.toLocaleLowerCase().includes(search.toLocaleLowerCase())),\n        [search, contacts],\n    );\n\n    return (\n        <SPhonebook>\n            <SHeading>Phonebook</SHeading>\n            <CreateContact onContactCreate={handleContactCreate} />\n            <ContactsFilter onChange={handleFilter} disabled={!contacts.length} />\n            <ContactsList contacts={filteredContacts} onContactDelete={handleContactDelete} />\n        </SPhonebook>\n    );\n};\n","import styled from 'styled-components';\n\nexport const SMainHeading = styled.h1`\n    margin: 0;\n    font-size: 24px;\n`;\n\nexport const SMainSection = styled.section``;\n\nexport const SMain = styled.main`\n    min-width: 400px;\n    max-width: 768px;\n    margin: 0 auto;\n    padding: 60px 20px 60px;\n\n    > ${SMainSection} {\n        margin-top: 50px;\n\n        & + & {\n            margin-top: 40px;\n        }\n\n        &:first-child {\n            margin-top: 0;\n        }\n    }\n`;\n\nexport const SMainSectionHeading = styled.h2`\n    margin: 0;\n    font-size: 20px;\n`;\n\nexport const SMainSectionContent = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-top: 20px;\n    padding: 20px;\n    box-shadow: 0 0 3px 0 rgba(0, 0, 0, 0.2);\n    border-radius: 2px;\n    background: ${({ bg }): string => bg || '#ffffff'};\n`;\n","import React from 'react';\nimport { Phonebook } from './Phonebook';\nimport { SMainSection, SMainSectionContent, SMainSectionHeading } from '../Main.sc';\n\nexport const PhonebookSection: React.FC = () => {\n    return (\n        <SMainSection>\n            <SMainSectionHeading>Telephone book</SMainSectionHeading>\n\n            <SMainSectionContent bg=\"skyblue\">\n                <Phonebook />\n            </SMainSectionContent>\n        </SMainSection>\n    );\n};\n","import React from 'react';\nimport { PhonebookSection } from '../Main/PhonebookSection';\nimport { SMain, SMainHeading } from '../Main';\n\nexport const App: React.FC = () => {\n    return (\n        <SMain>\n            <SMainHeading>Homework 02 – Ex. 02</SMainHeading>\n            <PhonebookSection />\n        </SMain>\n    );\n};\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}